// Generated by LiveScript 1.3.1
var lsc, elems, voids, readFileSync, ref$, filter, each, map, lines, unlines, unique, base, el, xel, indent, parseNodes, commonCompile, compile, compileHtml, compileXml;
lsc = require('LiveScript');
elems = require('./elements');
voids = require('./void');
readFileSync = require('fs').readFileSync;
ref$ = require('prelude-ls'), filter = ref$.filter, each = ref$.each, map = ref$.map, lines = ref$.lines, unlines = ref$.unlines, unique = ref$.unique;
base = readFileSync(__dirname + '/_base.ls', 'utf8');
el = function(name, close){
  close == null && (close = 1);
  if (voids.includes(name)) {
    close = 0;
  }
  return name + " = (a, b) !-> out \\" + name + " " + close + " a, b\n";
};
xel = function(name, close){
  close == null && (close = 1);
  return name + " = (a, b) !-> out \\" + name + " " + close + " a, b\n";
};
indent = function(str, t){
  t == null && (t = 1);
  return unlines(
  map(function(it){
    return repeatString$("  ", t) + it;
  })(
  lines(
  str)));
};
parseNodes = function(code){
  var vars, nodes, temp, tokens, i$, len$, i, token, node;
  vars = ['xml', 'doctype', '$'];
  nodes = [];
  temp = [];
  tokens = lsc.tokens(code);
  for (i$ = 0, len$ = tokens.length; i$ < len$; ++i$) {
    i = i$;
    token = tokens[i$];
    switch (token[0]) {
    case 'FUNCTION':
      vars.push(token[1]);
      break;
    case 'ID':
      switch (tokens[i + 1][0]) {
      case 'ASSIGN':
        vars.push(token[1]);
        break;
      case 'CALL(':
        temp.push(token[1]);
      }
    }
  }
  vars = unique(vars);
  temp = unique(temp);
  for (i$ = 0, len$ = temp.length; i$ < len$; ++i$) {
    node = temp[i$];
    if (!vars.includes(node)) {
      nodes.push(node);
    }
  }
  return nodes;
};
commonCompile = function(code, output){
  var fn;
  code = code.replace(/->/g, '!->');
  code = code.replace(/@/g, 'args.');
  fn = "return (args, opts) ->\n";
  fn += indent(output + "\n" + code + "\nstr.trim!");
  return new Function(lsc.compile(fn, {
    bare: true
  }))();
};
compile = function(code){
  if (code.match(/^xml/)) {
    return compileXml(code);
  } else {
    return compileHtml(code);
  }
};
compileHtml = function(code, output){
  output == null && (output = base + "\n");
  each(function(it){
    return output += el(it);
  })(
  filter(function(it){
    return elems.includes(it) || voids.includes(it);
  })(
  parseNodes(code)));
  return commonCompile(code, output);
};
compileXml = function(code, output){
  output == null && (output = base + "\n");
  each(function(it){
    return output += xel(it);
  })(
  parseNodes(code));
  return commonCompile(code, output);
};
module.exports = (compile.compileHtml = compileHtml, compile.compileXml = compileXml, compile);
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}